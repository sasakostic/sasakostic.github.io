{"version":3,"file":"component---src-pages-projects-tsx-6a550be112d0c699cf08.js","mappings":"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","sources":["webpack://sasakostic.github.io/./src/components/shared/CardActions.tsx","webpack://sasakostic.github.io/./src/components/elements/ProjectPreview.tsx","webpack://sasakostic.github.io/./src/utils/project.ts","webpack://sasakostic.github.io/./src/components/elements/ProjectsList.tsx","webpack://sasakostic.github.io/./src/components/elements/ProjectFilters.tsx","webpack://sasakostic.github.io/./src/utils/ssr.ts","webpack://sasakostic.github.io/./src/utils/url.ts","webpack://sasakostic.github.io/./src/components/screens/ProjectsScreen.tsx","webpack://sasakostic.github.io/./src/pages/projects.tsx","webpack://sasakostic.github.io/./src/components/shared/CardTitle.tsx","webpack://sasakostic.github.io/./node_modules/@react-icons/all-files/gi/GiAchievement.js"],"sourcesContent":["import React from 'react';\nimport Row from './Row';\n\ntype CardActionsProps = {\n  children: React.ReactNode,\n  className?: string,\n};\n\nconst CardActions = (props: CardActionsProps): React.ReactElement | null => {\n  const { children, className = 'px-6 pb-6' } = props;\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      <Row>\n        {children}\n      </Row>\n    </div>\n  );\n};\n\nexport default CardActions;\n","import React from 'react';\nimport { IoPlay } from '@react-icons/all-files/io5/IoPlay';\nimport { FaGithub } from '@react-icons/all-files/fa/FaGithub';\nimport { BiInfoCircle } from '@react-icons/all-files/bi/BiInfoCircle';\nimport { GiAchievement } from '@react-icons/all-files/gi/GiAchievement';\n\nimport { Project as ProjectType } from '../../types/Project';\nimport DateRange from '../shared/DateRange';\nimport Card from '../shared/Card';\nimport CardContent from '../shared/CardContent';\nimport CardMedia from '../shared/CardMedia';\nimport Tags from '../shared/Tags';\nimport FluidImage from '../shared/FluidImage';\nimport CardTitle from '../shared/CardTitle';\nimport CardActions from '../shared/CardActions';\nimport ButtonLink from '../shared/ButtonLink';\nimport Archived from '../shared/Archived';\nimport Row from '../shared/Row';\nimport { getProjectAchievementsLink } from '../../utils/project';\nimport { Link } from '../../types/Link';\nimport HyperLink from '../shared/HyperLink';\nimport Badge from '../shared/Badge';\n\ntype ProjectPreviewProps = {\n  project: ProjectType | null,\n};\n\nconst tagsPerProject = 3;\n\nconst withAchievements = true;\n\nconst ProjectPreview = (props: ProjectPreviewProps): React.ReactElement | null => {\n  const { project } = props;\n\n  if (!project) {\n    return null;\n  }\n\n  const projectTags = project?.tags ? (\n    <div>\n      <Tags tags={project.tags} numToShow={tagsPerProject} />\n    </div>\n  ) : null;\n\n  const projectDates = (\n    <DateRange\n      startDate={project.startDate}\n      endDate={project.endDate}\n      className=\"text-xs text-gray-500\"\n    />\n  );\n\n  /* eslint-disable react/no-array-index-key */\n  const projectSummaryLines = project.summary ? project.summary.map(\n    (summaryLine: string | null, index: number) => (\n      <p key={index}>\n        {summaryLine}\n      </p>\n    ),\n  ) : null;\n\n  const projectSummary = projectSummaryLines ? (\n    <div className=\"mb-3 font-light\">\n      {projectSummaryLines}\n    </div>\n  ) : null;\n\n  const defaultProjectUrl = project.archived ? undefined : project.demoURL || project.srcURL;\n\n  const demoLink = project.demoURL && !project.archived ? (\n    <ButtonLink\n      link={project.demoURL}\n      startEnhancer={<IoPlay />}\n      className=\"mr-4\"\n    >\n      Demo\n    </ButtonLink>\n  ) : null;\n\n  const sourceCodeLink = project.srcURL && !project.archived ? (\n    <ButtonLink\n      link={project.srcURL}\n      startEnhancer={<FaGithub />}\n    >\n      Source Code\n    </ButtonLink>\n  ) : null;\n\n  const projectCover = project.cover ? (\n    <FluidImage image={project.cover} />\n  ) : null;\n\n  const archivedStamp = project?.archived ? (\n    <CardActions>\n      <Archived />\n    </CardActions>\n  ) : null;\n\n  const actions = demoLink || sourceCodeLink ? (\n    <CardActions>\n      {demoLink}\n      {sourceCodeLink}\n    </CardActions>\n  ) : null;\n\n  const extraLinksList = project?.links && project?.links.length\n    ? project?.links.map((extraLink: Link, linkIndex) => {\n      return (\n        <li key={linkIndex}>\n          <HyperLink\n            link={extraLink}\n            className=\"text-sm underline\"\n            separatorClassName=\"w-1\"\n            startEnhancer={(<BiInfoCircle size={14} />)}\n          >\n            {extraLink?.caption || 'Read more'}\n          </HyperLink>\n        </li>\n      );\n    })\n    : null;\n\n  const achievementsLink = withAchievements\n    && project?.achievements\n    && project.achievements.length\n    ? (\n      <Row className=\"mt-3\">\n        <HyperLink\n          link={getProjectAchievementsLink(project.id)}\n          className=\"text-sm underline\"\n          separatorClassName=\"w-1\"\n          startEnhancer={(<GiAchievement size={18} />)}\n        >\n          Achievements\n        </HyperLink>\n        <Badge className=\"ml-2\">\n          <small>{project.achievements.length}</small>\n        </Badge>\n      </Row>\n    )\n    : null;\n\n  const externalLinks = extraLinksList ? (\n    <ul className=\"mt-3\">\n      {extraLinksList}\n    </ul>\n  ) : null;\n\n  return (\n    <Card>\n      <CardMedia link={defaultProjectUrl}>\n        {projectCover}\n      </CardMedia>\n      <CardContent>\n        <CardTitle link={defaultProjectUrl}>\n          {project.name}\n        </CardTitle>\n        <Row className=\"mb-3 justify-between\">\n          <div>\n            {projectDates}\n          </div>\n          <div>\n            &nbsp;\n          </div>\n        </Row>\n        {projectSummary}\n        {projectTags}\n        {achievementsLink}\n        {externalLinks}\n      </CardContent>\n      {actions}\n      {archivedStamp}\n    </Card>\n  );\n};\n\nexport default ProjectPreview;\n","import { Project, ProjectID, Projects } from '../types/Project';\nimport { Link } from '../types/Link';\nimport { routes } from '../constants/routes';\n\nexport function getGitHubProjectID(project: Project): string | null {\n  if (\n    !project\n    || !project?.gitHubRepo\n    || !project?.gitHubRepo?.repo\n    || !project?.gitHubRepo?.owner\n  ) {\n    return null;\n  }\n  return `${project.gitHubRepo.owner}/${project.gitHubRepo.repo}`;\n}\n\nexport function projectMapToArray(projects: Projects): Project[] {\n  return Object.keys(projects)\n    .map<Project>((projectID: ProjectID) => {\n      const project: Project = { ...projects[projectID] };\n      // Make sure that the project ID is the same as the project key in the projects map.\n      project.id = projectID;\n      return project;\n    });\n}\n\nexport function getProjectAchievementsLink(projectID: ProjectID): Link {\n  return {\n    url: `${routes.projects.path}/${projectID}#achievements`,\n  };\n}\n","import React from 'react';\n\nimport { Project } from '../../types/Project';\nimport ProjectPreview from './ProjectPreview';\nimport Cards from '../shared/Cards';\n\ntype ProjectsListProps = {\n  projects: Project[],\n};\n\nconst ProjectsList = (props: ProjectsListProps): React.ReactElement => {\n  const { projects } = props;\n\n  const projectsElements = projects.map((project) => {\n    return <ProjectPreview project={project} key={project.id} />;\n  });\n\n  return (\n    <Cards>\n      {projectsElements}\n    </Cards>\n  );\n};\n\nexport default ProjectsList;\n","import React, { ChangeEvent } from 'react';\nimport Row from '../shared/Row';\n\nexport type SortOption = 'startDateAsc' | 'startDateDesc';\n\nexport const sortByStartDateAsc: SortOption = 'startDateAsc';\nexport const sortByStartDateDesc: SortOption = 'startDateDesc';\n\ntype Sorter = {\n  title: string,\n  hidden?: boolean,\n}\n\ntype Sorters = Record<SortOption, Sorter>;\n\nconst sorters: Sorters = {\n  [sortByStartDateDesc]: {\n    title: '➘ start date',\n  },\n  [sortByStartDateAsc]: {\n    title: '➚ start date',\n    hidden: true,\n  },\n};\n\nexport const supportedSortOptions: SortOption[] = Object\n  .keys(sorters)\n  // @ts-ignore\n  .filter((sortOption: SortOption) => !sorters[sortOption].hidden);\n\ntype ProjectFiltersProps = {\n  sortBy: SortOption,\n  onSort: (sortKey: SortOption) => void,\n};\n\nconst ProjectFilters = (props: ProjectFiltersProps): React.ReactElement => {\n  const { onSort, sortBy } = props;\n\n  const sorterOptions = Object.keys(sorters)\n    .filter((sorterKey: string) => {\n      const sorter = sorters[sorterKey as SortOption];\n      return !sorter?.hidden;\n    })\n    .map((sorterKey: string) => {\n      const sorter = sorters[sorterKey as SortOption];\n      return (\n        <option key={sorterKey} value={sorterKey}>\n          {sorter.title}\n        </option>\n      );\n    });\n\n  const onSortChange = (event: ChangeEvent<HTMLSelectElement>): void => {\n    const selectedKey: SortOption = event.target.value as SortOption;\n    onSort(selectedKey);\n  };\n\n  return (\n    <div>\n      <Row>\n        <div className=\"text-sm text-gray-500 mr-1\">\n          Sort by:\n        </div>\n        <div>\n          <select onChange={onSortChange} defaultValue={sortBy} className=\"text-sm\">\n            {sorterOptions}\n          </select>\n        </div>\n      </Row>\n    </div>\n  );\n};\n\nexport default ProjectFilters;\n","// If it is server-side-rendering, we don't have an access to document.\n// @see: https://www.gatsbyjs.com/docs/using-client-side-only-packages/\nexport const isSSR = typeof document === 'undefined';\n","import { isSSR } from './ssr';\n\nconst getSearchParams = (): URLSearchParams => {\n  const searchQuery = isSSR ? '' : document.location.search.substring(1);\n  return new URLSearchParams(searchQuery);\n};\n\nexport const getSearchParam = (name: string): string | null => {\n  const searchParams = getSearchParams();\n  return searchParams.get(name);\n};\n\nexport const setSearchParam = (name: string, value: string): void => {\n  if (isSSR) {\n    return;\n  }\n  const searchParams = getSearchParams();\n  searchParams.set(name, value);\n  const relativeURL = `?${searchParams.toString()}${document.location.hash}`;\n  window.history.pushState(null, '', relativeURL);\n};\n\nexport const deleteSearchParam = (name: string): void => {\n  if (isSSR) {\n    return;\n  }\n  const searchParams = getSearchParams();\n  searchParams.delete(name);\n  const relativeURL = `?${searchParams.toString()}${document.location.hash}`;\n  window.history.pushState(null, '', relativeURL);\n};\n\nexport const getStringSearchParam = (name: string, defaultValue: string): string => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return searchParam;\n};\n\nexport const getIntSearchParam = (name: string, defaultValue: number): number => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return parseInt(searchParam, 10);\n};\n\nexport const getFloatSearchParam = (name: string, defaultValue: number): number => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return parseFloat(searchParam);\n};\n\nexport const getBooleanSearchParam = (name: string, defaultValue: boolean): boolean => {\n  const searchParam: string | null = getSearchParam(name);\n  if (searchParam === null) {\n    return defaultValue;\n  }\n  return searchParam.toLowerCase() === 'true';\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { Project as ProjectType, Projects as ProjectsType } from '../../types/Project';\nimport ProjectsList from '../elements/ProjectsList';\nimport PageLayout from '../layouts/PageLayout';\nimport PageHeader from '../shared/PageHeader';\nimport Badge from '../shared/Badge';\nimport Row from '../shared/Row';\nimport SEO from '../shared/SEO';\nimport ProjectFilters, {\n  sortByStartDateAsc,\n  sortByStartDateDesc,\n  SortOption, supportedSortOptions,\n} from '../elements/ProjectFilters';\nimport { projectMapToArray } from '../../utils/project';\nimport { getStringSearchParam, setSearchParam } from '../../utils/url';\n\ntype ProjectsScreenProps = {\n  projects: ProjectsType,\n};\n\ntype ProjectSorter = {\n  // Returns -1, 0, +1.\n  sort: (a: ProjectType, b: ProjectType) => number,\n};\n\ntype ProjectSorters = Record<SortOption, ProjectSorter>;\n\nconst SORT_PARAM_NAME = 'sort';\n\n// @ts-ignore\nconst projectSorters: ProjectSorters = {\n  [sortByStartDateDesc]: {\n    sort: (a: ProjectType, b: ProjectType): number => {\n      if (!a?.startDate || !b.startDate || a.startDate === b.startDate) {\n        return 0;\n      }\n      return a.startDate > b.startDate ? -1 : 1;\n    },\n  },\n  [sortByStartDateAsc]: {\n    sort: (a: ProjectType, b: ProjectType): number => {\n      if (!a?.startDate || !b.startDate || a.startDate === b.startDate) {\n        return 0;\n      }\n      return a.startDate < b.startDate ? -1 : 1;\n    },\n  },\n};\n\nconst getDefaultSortOption = (): SortOption => {\n  const defaultOption = sortByStartDateDesc;\n  // @ts-ignore\n  const sortFromURL: SortOption = getStringSearchParam(SORT_PARAM_NAME, defaultOption);\n  if (supportedSortOptions.includes(sortFromURL)) {\n    return sortFromURL;\n  }\n  return defaultOption;\n};\n\nconst ProjectsScreen = (props: ProjectsScreenProps): React.ReactElement => {\n  const { projects } = props;\n\n  const [sortBy, setSortBy] = useState<SortOption>(getDefaultSortOption());\n  const [filteredProjects, setFilteredProjects] = useState<ProjectType[]>(\n    projectMapToArray(projects),\n  );\n\n  const onSort = (newSortOption: SortOption): void => {\n    setSearchParam(SORT_PARAM_NAME, newSortOption);\n    setSortBy(newSortOption);\n  };\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    const sortedProjects = [...filteredProjects].sort(projectSorters[sortBy].sort);\n    setFilteredProjects(sortedProjects);\n  }, [sortBy]);\n\n  const projectsNum = filteredProjects.length;\n\n  return (\n    <PageLayout>\n      <SEO\n        title=\"Projects\"\n        description=\"Projects and experiments that help people learn\"\n      />\n      <Row>\n        <PageHeader>Projects</PageHeader>\n        <Badge className=\"ml-3 self-start\">{projectsNum}</Badge>\n      </Row>\n      <Row className=\"mb-6 justify-between\">\n        <ProjectFilters onSort={onSort} sortBy={sortBy} />\n        <Row className=\"ml-3\">\n          <div className=\"text-sm text-gray-500 mr-1\">\n            &nbsp;\n          </div>\n        </Row>\n      </Row>\n      <ProjectsList projects={filteredProjects} />\n    </PageLayout>\n  );\n};\n\nexport default ProjectsScreen;\n","import React from 'react';\n\nimport ProjectsScreen from '../components/screens/ProjectsScreen';\nimport { projects } from '../data/projects';\n\nconst Projects = (): React.ReactElement => {\n  return (\n    <ProjectsScreen projects={projects} />\n  );\n};\n\nexport default Projects;\n","import React from 'react';\nimport H, { hLevel } from './H';\nimport { Link } from '../../types/Link';\nimport HyperLink from './HyperLink';\n\ntype CardTitleProps = {\n  children: React.ReactNode,\n  link?: Link,\n};\n\nconst CardTitle = (props: CardTitleProps): React.ReactElement | null => {\n  const { children, link } = props;\n\n  if (!children) {\n    return null;\n  }\n\n  const headerElement = (\n    <H level={hLevel.h3}>\n      {children}\n    </H>\n  );\n\n  const linkElement = link ? (\n    <HyperLink link={link}>\n      {headerElement}\n    </HyperLink>\n  ) : null;\n\n  return (\n    <div className=\"mb-3\">\n      {linkElement || headerElement}\n    </div>\n  );\n};\n\nexport default CardTitle;\n","// THIS FILE IS AUTO GENERATED\nvar GenIcon = require('../lib').GenIcon\nmodule.exports.GiAchievement = function GiAchievement (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 512 512\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M305.975 298.814l22.704 2.383V486l-62.712-66.965V312.499l18.214 8.895zm-99.95 0l-22.716 2.383V486l62.711-66.965V312.499l-18.213 8.895zm171.98-115.78l7.347 25.574-22.055 14.87-1.847 26.571-25.81 6.425-10.803 24.314-26.46-2.795-18.475 19.087L256 285.403l-23.902 11.677-18.475-19.15-26.46 2.795-10.803-24.313-25.81-6.363-1.847-26.534-22.118-14.92 7.348-25.573-15.594-21.544 15.644-21.52-7.398-25.523 22.068-14.87L150.5 73.03l25.86-6.362 10.803-24.313 26.46 2.794L232.098 26 256 37.677 279.902 26l18.475 19.149 26.46-2.794 10.803 24.313 25.81 6.425 1.847 26.534 22.055 14.87-7.347 25.574 15.656 21.407zm-49.214-21.556a72.242 72.242 0 1 0-72.242 72.242 72.355 72.355 0 0 0 72.242-72.242zm-72.242-52.283a52.282 52.282 0 1 0 52.282 52.283 52.395 52.395 0 0 0-52.282-52.245z\"}}]})(props);\n};\n"],"names":["props","children","className","React","Row","project","projectTags","tags","Tags","numToShow","projectDates","DateRange","startDate","endDate","projectSummaryLines","summary","map","summaryLine","index","key","projectSummary","defaultProjectUrl","archived","undefined","demoURL","srcURL","demoLink","ButtonLink","link","startEnhancer","IoPlay","sourceCodeLink","FaGithub","projectCover","cover","FluidImage","image","archivedStamp","CardActions","Archived","actions","extraLinksList","links","length","extraLink","linkIndex","HyperLink","separatorClassName","BiInfoCircle","size","caption","achievementsLink","withAchievements","achievements","projectID","id","url","routes","projects","path","GiAchievement","Badge","externalLinks","Card","CardMedia","CardContent","CardTitle","name","projectsElements","ProjectPreview","Cards","sortByStartDateAsc","sortByStartDateDesc","sorters","title","hidden","supportedSortOptions","Object","keys","filter","sortOption","onSort","sortBy","sorterOptions","sorterKey","sorter","value","onChange","event","selectedKey","target","defaultValue","isSSR","document","getSearchParams","searchQuery","location","search","substring","URLSearchParams","getSearchParam","get","SORT_PARAM_NAME","projectSorters","sort","a","b","getDefaultSortOption","defaultOption","sortFromURL","getStringSearchParam","searchParam","includes","setSortBy","useState","filteredProjects","setFilteredProjects","assign","projectMapToArray","useEffect","sortedProjects","_toConsumableArray","projectsNum","PageLayout","SEO","description","PageHeader","ProjectFilters","newSortOption","setSearchParam","searchParams","set","relativeURL","toString","hash","window","history","pushState","ProjectsList","Projects","ProjectsScreen","headerElement","H","level","hLevel","h3","linkElement","GenIcon","module","exports"],"sourceRoot":""}